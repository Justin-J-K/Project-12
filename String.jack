// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array characters;
    field int stringLength, maximumLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (~(maxLength > 0)) {
            let maxLength = 1;
        }
        let characters = Array.new(maxLength);
        let stringLength = 0;
        let maximumLength = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do characters.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return stringLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | ~(j < maximumLength)) {
            return null;
        } else {
            return characters[j];
        }        
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (~(j < 0) & (j < maximumLength)) {
            let characters[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (stringLength < maximumLength) {
            let characters[stringLength] = c;
            let stringLength = stringLength + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (stringLength > 0) {
            let stringLength = stringLength - 1;
            let characters[stringLength] = 0;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value, i, digit;
        var boolean done, negative;

        let value = 0;
        let i = 0;
        let done = false;
        let negative = false;

        // check if negative
        if ((stringLength > 0) & (characters[0] = 45)) {
            let negative = true;
            let i = 1;
        }

        // iterate over characters until encounter non-digit
        while ((i < stringLength) & ~(done)) {
            let digit = characters[i] - 48;

            // check if digit
            if ((digit < 0) | (digit > 9)) {
                let done = true;
            } else {
                let value = value * 10 + digit;
            }

            let i = i + 1;
        }

        if (negative) {
            let value = -value;
        }

        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let stringLength = 0;
        
        // check if negative
        if (val < 0) {
            do appendChar(45);
            let val = -val;
        }

        do setIntRecursive(val);
        return;
    }

    method void setIntRecursive(int val) {
        var int lastDigit, c;

        let lastDigit = val - ((val / 10) * 10);
        let c = lastDigit + 48;

        // append each integer as a character
        if (~(val = 0)) {
            do setIntRecursive(val / 10);
            do appendChar(c);
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
